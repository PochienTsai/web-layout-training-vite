'use strict';

const vite = require('vite');
const xml2js = require('xml2js');

function generateWebConfig(rules) {
  const config = {
    configuration: {
      "system.webServer": [
        {
          rewrite: [
            {
              rules: [
                {
                  rule: rules.map((rule) => {
                    const pattern = rule[0].startsWith("/") ? rule[0].slice(1) : rule[0];
                    const target = rule[1];
                    const p = `${pattern}/(.*)`;
                    return {
                      $: {
                        name: `${pattern}_rule`,
                        stopProcessing: "true"
                      },
                      match: [{ $: { url: p } }],
                      conditions: [
                        {
                          $: { logicalGrouping: "MatchAll" },
                          add: [
                            {
                              $: {
                                input: "{REQUEST_URI}",
                                pattern: p
                              }
                            }
                          ]
                        }
                      ],
                      action: [
                        {
                          $: {
                            type: "Rewrite",
                            url: `${target}/{R:1}`,
                            logRewrittenUrl: "true"
                          }
                        }
                      ]
                    };
                  })
                }
              ]
            }
          ]
        }
      ]
    }
  };
  const builder = new xml2js.Builder();
  const xml = builder.buildObject(config);
  return xml;
}

const httpsRE = /^https:\/\//;
function createProxy(list = []) {
  const ret = {};
  list.forEach(([prefix, target]) => {
    const isHttps = httpsRE.test(target);
    if (!prefix.startsWith("/"))
      prefix = `/${prefix}`;
    ret[prefix] = {
      target,
      changeOrigin: true,
      ws: true,
      rewrite: (path) => path.replace(new RegExp(`^${prefix}`), ""),
      ...isHttps ? { secure: false } : {}
    };
  });
  return ret;
}
function getParsedProxyConfig(env) {
  const proxyConfig = env.VITE_PROXY;
  if (proxyConfig) {
    try {
      const config = JSON.parse(proxyConfig);
      if (Array.isArray(config))
        return config;
      return [];
    } catch (e) {
      console.error("VITE_PROXY parse failed, ignored.");
    }
  }
  return [];
}

function WebConfig(options = {}) {
  const { proxy = [], output = "web.config" } = options;
  function getProxyList(mode = "development") {
    if (proxy.length)
      return proxy;
    return getParsedProxyConfig(vite.loadEnv(mode, process.cwd()));
  }
  let env;
  return {
    name: "vite-plugin-web-config",
    config(_, _env) {
      env = _env;
      const ProxyList = getProxyList(env.mode);
      if (ProxyList.length > 0) {
        return {
          server: {
            proxy: createProxy(ProxyList)
          }
        };
      }
    },
    buildEnd() {
      if (output === false || env.command === "serve")
        return;
      const ProxyList = getProxyList(env.mode);
      const webConfig = generateWebConfig(ProxyList);
      if (webConfig) {
        this.emitFile({
          type: "asset",
          fileName: output,
          source: webConfig
        });
      }
    }
  };
}

module.exports = WebConfig;
