/*!
 * devextreme-vue
 * Version: 23.2.3
 * Build date: Tue Nov 28 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { h, } from 'vue';
import { configurationDefaultTemplate, configurationTemplate, declaredTemplates, getChildren, getConfigurationOptions, mount, } from './vue-helper';
var TEMPLATE_PROP = 'template';
function asConfigurable(component) {
    var componentOptions = component;
    if (!componentOptions) {
        return;
    }
    if (!componentOptions.$_config || !componentOptions.$_config.name) {
        return undefined;
    }
    return componentOptions;
}
function hasTemplate(component) {
    return TEMPLATE_PROP in component.type.props && configurationTemplate(component);
}
function discover(component) {
    var templates = {};
    var namedTeplates = declaredTemplates(component);
    for (var slotName in namedTeplates) {
        if (slotName === 'default' && component.$slots.default) {
            continue;
        }
        var slot = namedTeplates[slotName];
        if (!slot) {
            continue;
        }
        templates[slotName] = slot;
    }
    var componentChildren = getChildren(component);
    for (var _i = 0, componentChildren_1 = componentChildren; _i < componentChildren_1.length; _i++) {
        var childComponent = componentChildren_1[_i];
        var configurable = asConfigurable(childComponent);
        if (!configurable) {
            continue;
        }
        var defaultSlot = configurationDefaultTemplate(childComponent);
        if (!defaultSlot || !hasTemplate(childComponent)) {
            continue;
        }
        var templateName = configurable.$_config.fullPath + "." + TEMPLATE_PROP;
        templates[templateName] = defaultSlot;
    }
    return templates;
}
function clearConfiguration(content) {
    var newContent = [];
    content.forEach(function (item) {
        var configurable = getConfigurationOptions(item);
        if (!configurable || !configurable.$_optionName) {
            newContent.push(item);
        }
    });
    return newContent;
}
function mountTemplate(getSlot, parent, data, name, placeholder) {
    return mount({
        name: name,
        inject: ['eventBus'],
        created: function () {
            this.eventBus.add(this.$_updatedHandler);
        },
        mounted: function () {
            data.onRendered();
        },
        unmounted: function () {
            this.eventBus.remove(this.$_updatedHandler);
        },
        methods: {
            $_updatedHandler: function () {
                this.$forceUpdate();
            },
        },
        render: function () {
            var content = clearConfiguration(getSlot()(data));
            if (!content) {
                return h('div');
            }
            return content.length > 1 ? content : content[0];
        },
    }, parent, placeholder);
}
export { mountTemplate, discover, };
