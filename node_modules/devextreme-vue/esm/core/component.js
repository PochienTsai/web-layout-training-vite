/*!
 * devextreme-vue
 * Version: 23.2.3
 * Build date: Tue Nov 28 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { defineComponent, h, } from 'vue';
import CreateCallback from 'devextreme/core/utils/callbacks';
import { triggerHandler } from 'devextreme/events';
import { defaultSlots, getChildren, getComponentProps, getVModelValue, VMODEL_NAME, } from './vue-helper';
import { pullAllChildren } from './children-processing';
import Configuration, { bindOptionWatchers, setEmitOptionChangedFunc } from './configuration';
import { initOptionChangedFunc } from './configuration-component';
import { DX_REMOVE_EVENT } from './constants';
import { camelize, forEachChildNode, getOptionValue, getTemplatePropName, toComparable, } from './helpers';
import { TemplatesManager } from './templates-manager';
var includeAttrs = ['id', 'class', 'style'];
function getAttrs(attrs) {
    var attributes = {};
    includeAttrs.forEach(function (attr) {
        var attrValue = attrs[attr];
        if (attrValue) {
            attributes[attr] = attrValue;
        }
    });
    return attributes;
}
function initBaseComponent() {
    return defineComponent({
        inheritAttrs: false,
        data: function () {
            return {
                eventBus: CreateCallback(),
            };
        },
        provide: function () {
            return {
                eventBus: this.eventBus,
            };
        },
        render: function () {
            var thisComponent = this;
            var children = [];
            if (thisComponent.$_config.cleanNested) {
                thisComponent.$_config.cleanNested();
            }
            pullAllChildren(defaultSlots(this), children, thisComponent.$_config);
            this.$_processChildren(children);
            return h('div', __assign({}, getAttrs(this.$attrs)), children);
        },
        beforeUpdate: function () {
            var thisComponent = this;
            thisComponent.$_config.setPrevNestedOptions(thisComponent.$_config.getNestedOptionValues());
        },
        updated: function () {
            var thisComponent = this;
            var nodes = cleanWidgetNode(this.$el);
            getChildren(thisComponent).forEach(function (child) {
                var _a;
                initOptionChangedFunc(child.$_config, child.type.props || {}, (_a = child === null || child === void 0 ? void 0 : child.component) === null || _a === void 0 ? void 0 : _a.proxy, child.$_innerChanges);
            });
            thisComponent.$_templatesManager.discover();
            thisComponent.$_instance.beginUpdate();
            this.$_applyConfigurationChanges();
            if (thisComponent.$_templatesManager.isDirty) {
                thisComponent.$_instance.option('integrationOptions.templates', thisComponent.$_templatesManager.templates);
                var props = thisComponent.$.vnode.props;
                for (var _i = 0, _a = Object.keys(thisComponent.$_templatesManager.templates); _i < _a.length; _i++) {
                    var name_1 = _a[_i];
                    thisComponent.$_instance.option(getTemplatePropName(props, name_1), name_1);
                }
                thisComponent.$_templatesManager.resetDirtyFlag();
            }
            for (var _b = 0, _c = Object.keys(thisComponent.$_pendingOptions); _b < _c.length; _b++) {
                var name_2 = _c[_b];
                thisComponent.$_instance.option(name_2, thisComponent.$_pendingOptions[name_2]);
            }
            thisComponent.$_pendingOptions = {};
            thisComponent.$_instance.endUpdate();
            restoreNodes(this.$el, nodes);
            this.eventBus.fire();
        },
        beforeUnmount: function () {
            var thisComponent = this;
            var instance = thisComponent.$_instance;
            if (instance) {
                triggerHandler(this.$el, DX_REMOVE_EVENT);
                instance.dispose();
            }
        },
        created: function () {
            var thisComponent = this;
            var props = getComponentProps(this);
            thisComponent.$_config = new Configuration(function (n, v) {
                if (Array.isArray(v)) {
                    thisComponent.$_instance.option(n, v);
                }
                else {
                    thisComponent.$_pendingOptions[n === VMODEL_NAME ? 'value' : n] = v;
                }
            }, null, props && __assign({}, props), thisComponent.$_expectedChildren);
            thisComponent.$_innerChanges = {};
            thisComponent.$_config.init(this.$props && Object.keys(this.$props));
        },
        methods: {
            $_applyConfigurationChanges: function () {
                var thisComponent = this;
                thisComponent.$_config.componentsCountChanged.forEach(function (_a) {
                    var optionPath = _a.optionPath, isCollection = _a.isCollection, removed = _a.removed;
                    var options = thisComponent.$_config.getNestedOptionValues();
                    if (!isCollection && removed) {
                        thisComponent.$_instance.resetOption(optionPath);
                    }
                    else {
                        thisComponent.$_instance.option(optionPath, getOptionValue(options, optionPath));
                    }
                });
                thisComponent.$_config.cleanComponentsCountChanged();
            },
            $_createWidget: function (element) {
                var thisComponent = this;
                thisComponent.$_pendingOptions = {};
                thisComponent.$_templatesManager = new TemplatesManager(this);
                var config = thisComponent.$_config;
                if (config.initialValues.hasOwnProperty(VMODEL_NAME)) {
                    config.initialValues.value = getVModelValue(config.initialValues);
                }
                var options = __assign(__assign(__assign(__assign({ templatesRenderAsynchronously: thisComponent.$_hasAsyncTemplate }, getComponentProps(thisComponent)), config.initialValues), config.getNestedOptionValues()), this.$_getIntegrationOptions());
                var instance = new thisComponent.$_WidgetClass(element, options);
                thisComponent.$_instance = instance;
                instance.on('optionChanged', function (args) { return config.onOptionChanged(args); });
                setEmitOptionChangedFunc(config, thisComponent, thisComponent.$_innerChanges);
                bindOptionWatchers(config, thisComponent, thisComponent.$_innerChanges);
                this.$_createEmitters(instance);
            },
            $_getIntegrationOptions: function () {
                var thisComponent = this;
                var result = __assign({ integrationOptions: {
                        watchMethod: this.$_getWatchMethod(),
                    } }, this.$_getExtraIntegrationOptions());
                if (thisComponent.$_templatesManager.isDirty) {
                    var templates = thisComponent.$_templatesManager.templates;
                    result.integrationOptions.templates = templates;
                    var props = thisComponent.$.vnode.props;
                    for (var _i = 0, _a = Object.keys(templates); _i < _a.length; _i++) {
                        var name_3 = _a[_i];
                        result[getTemplatePropName(props, name_3)] = name_3;
                    }
                    thisComponent.$_templatesManager.resetDirtyFlag();
                }
                return result;
            },
            $_getWatchMethod: function () {
                var _this = this;
                return function (valueGetter, valueChangeCallback, options) {
                    options = options || {};
                    if (!options.skipImmediate) {
                        valueChangeCallback(valueGetter());
                    }
                    return _this.$watch(function () { return valueGetter(); }, function (newValue, oldValue) {
                        if (toComparable(oldValue) !== toComparable(newValue) || options.deep) {
                            valueChangeCallback(newValue);
                        }
                    }, {
                        deep: options.deep,
                    });
                };
            },
            $_getExtraIntegrationOptions: function () {
                return {};
            },
            $_processChildren: function (_children) {
            },
            $_createEmitters: function (instance) {
                var _this = this;
                if (this.$attrs) {
                    Object.keys(this.$attrs).forEach(function (listenerName) {
                        var eventName = camelize(listenerName);
                        instance.on(eventName, function (e) {
                            _this.$emit(listenerName, e);
                        });
                    });
                }
            },
        },
    });
}
function cleanWidgetNode(node) {
    var removedNodes = [];
    forEachChildNode(node, function (childNode) {
        var parent = childNode.parentNode;
        var isExtension = childNode.hasAttribute && childNode.hasAttribute('isExtension');
        if ((childNode.nodeName === '#comment' || isExtension) && parent) {
            removedNodes.push(childNode);
            parent.removeChild(childNode);
        }
    });
    return removedNodes;
}
function restoreNodes(el, nodes) {
    nodes.forEach(function (node) {
        el.appendChild(node);
    });
}
function initDxComponent() {
    return defineComponent({
        extends: initBaseComponent(),
        methods: {
            $_getExtraIntegrationOptions: function () {
                return {
                    onInitializing: function () {
                        this.beginUpdate();
                    },
                };
            },
            $_processChildren: function (children) {
                children.forEach(function (childNode) {
                    if (!childNode || typeof childNode !== 'object') {
                        return;
                    }
                    childNode.$_hasOwner = true;
                });
            },
        },
        mounted: function () {
            var _this = this;
            var nodes = cleanWidgetNode(this.$el);
            var thisComponent = this;
            this.$_createWidget(this.$el);
            thisComponent.$_instance.endUpdate();
            restoreNodes(this.$el, nodes);
            if (this.$slots && this.$slots.default) {
                getChildren(thisComponent).forEach(function (child) {
                    var childExtenton = child;
                    if (childExtenton && childExtenton.$_isExtension) {
                        childExtenton.$_attachTo(_this.$el);
                    }
                });
            }
        },
    });
}
export { initDxComponent, initBaseComponent };
