/*!
 * devextreme-vue
 * Version: 23.2.3
 * Build date: Tue Nov 28 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import domAdapter from 'devextreme/core/dom_adapter';
import { one } from 'devextreme/events';
import { discover as discoverSlots, mountTemplate, } from './templates-discovering';
import { DX_REMOVE_EVENT, DX_TEMPLATE_WRAPPER_CLASS } from './constants';
import { allKeysAreEqual } from './helpers';
var TemplatesManager = /** @class */ (function () {
    function TemplatesManager(component) {
        this._slots = {};
        this._templates = {};
        this._isDirty = false;
        this._component = component;
        this.discover();
    }
    TemplatesManager.prototype.discover = function () {
        this._slots = __assign({}, discoverSlots(this._component));
        if (!allKeysAreEqual(this._templates, this._slots)) {
            this._prepareTemplates();
        }
    };
    Object.defineProperty(TemplatesManager.prototype, "templates", {
        get: function () {
            return this._templates;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TemplatesManager.prototype, "isDirty", {
        get: function () {
            return this._isDirty;
        },
        enumerable: false,
        configurable: true
    });
    TemplatesManager.prototype.resetDirtyFlag = function () {
        this._isDirty = false;
    };
    TemplatesManager.prototype._prepareTemplates = function () {
        this._templates = {};
        for (var _i = 0, _a = Object.keys(this._slots); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            this._templates[name_1] = this.createDxTemplate(name_1);
        }
        this._isDirty = true;
    };
    TemplatesManager.prototype.createDxTemplate = function (name) {
        var _this = this;
        return {
            render: function (data) {
                var rendered = (function (onRendered, counter) {
                    if (counter === void 0) { counter = 0; }
                    return function () {
                        if (counter === 1 && onRendered) {
                            onRendered();
                        }
                        counter++;
                    };
                })(data.onRendered);
                var scopeData = { data: data.model, index: data.index, onRendered: rendered };
                var placeholder = document.createElement('div');
                var container = data.container.get ? data.container.get(0) : data.container;
                container.appendChild(placeholder);
                var mountedTemplate = mountTemplate(function () { return _this._slots[name]; }, _this._component, scopeData, name, placeholder);
                var element = mountedTemplate.$el;
                container.removeChild(placeholder);
                while (placeholder.firstChild) {
                    container.appendChild(placeholder.firstChild);
                }
                domAdapter.setClass(element, DX_TEMPLATE_WRAPPER_CLASS, true);
                if (element.nodeType === Node.TEXT_NODE) {
                    var removalListener = document.createElement(container.nodeName === 'TABLE' ? 'tbody' : 'span');
                    removalListener.style.display = 'none';
                    container.appendChild(removalListener);
                    one(removalListener, DX_REMOVE_EVENT, mountedTemplate.$.appContext.app.unmount.bind(mountedTemplate));
                }
                else {
                    one(element, DX_REMOVE_EVENT, mountedTemplate.$.appContext.app.unmount.bind(mountedTemplate));
                }
                rendered();
                return element;
            },
        };
    };
    return TemplatesManager;
}());
export { TemplatesManager };
