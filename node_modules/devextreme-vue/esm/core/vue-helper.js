/*!
 * devextreme-vue
 * Version: 23.2.3
 * Build date: Tue Nov 28 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Comment, createApp, } from 'vue';
import { camelize } from './helpers';
import { isFragment } from './children-processing';
export var VMODEL_NAME = 'modelValue';
export function getChildren(component) {
    if (!hasChildren(component) || !component.$_config) {
        return [];
    }
    var children = component.$.subTree && component.$.subTree.children;
    if (!Array.isArray(children)) {
        return [];
    }
    // @ts-expect-error TS7030
    return children.filter(function (child) {
        if (!isFragment(child)) {
            return child;
        }
    });
}
export function getComponentInfo(component) {
    return getConfigurationOptions(component);
}
export function getNormalizedProps(props) {
    var result = {};
    for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
            result[camelize(propName)] = props[propName];
        }
    }
    return result;
}
export function configurationChildren(component) {
    if (!component.children || !component.children.default) {
        return [];
    }
    return findConfigurationComponents(component.children.default());
}
export function configurationDefaultTemplate(node) {
    if (!node.children || node.children === 'object' || !node.children.default) {
        return;
    }
    return hasInlineTemplate(node.children.default()) ? node.children.default : undefined;
}
export function configurationTemplate(node) {
    return configurationDefaultTemplate(node);
}
export function declaredTemplates(component) {
    return component.$slots;
}
export function defaultSlots(component) {
    var templates = declaredTemplates(component);
    if (!templates.default) {
        return [];
    }
    return templates.default();
}
export function mount(options, parent, el) {
    var template = createApp(options);
    template.provide('eventBus', parent.eventBus);
    setAppContext(template, parent);
    return template.mount(el);
}
export function getComponentProps(component) {
    var props = component.$.vnode.props || {};
    return getNormalizedProps(props);
}
export function usedConfigurationProps(node) {
    return node.props;
}
export function getNodeOptions(component) {
    if (component.$) {
        return component.$.vnode;
    }
    return component;
}
export function getNodeTypeOfComponent(component) {
    return component.$.vnode.type;
}
export function getVModelValue(options) {
    return options[VMODEL_NAME];
}
export function setCompatOptions(component) {
    component.compatConfig = {
        MODE: 3,
    };
}
export function setVModel(config) {
    var _a;
    var eventName = "update:" + VMODEL_NAME;
    config.model.prop = VMODEL_NAME;
    config.model.event = eventName;
    config.props.modelValue = {};
    config.emits = __assign(__assign({}, config.emits), (_a = {}, _a["" + eventName] = null, _a));
}
function setCustomPluginsData(appContext, parentAppContext) {
    for (var prop in parentAppContext) {
        if (!appContext.hasOwnProperty(prop) && parentAppContext.hasOwnProperty(prop)) {
            appContext[prop] = parentAppContext[prop];
        }
    }
}
function setAppContext(template, parent) {
    template._context.components = Object.assign(parent.$.appContext.components, template._context.components);
    Object.setPrototypeOf(template._context.provides, Object.getPrototypeOf(parent.$.provides));
    Object.assign(template._context.provides, parent.$.appContext.provides);
    template._context.config = parent.$.appContext.config;
    template._context.directives = parent.$.appContext.directives;
    template._context.mixins = parent.$.appContext.mixins;
    setCustomPluginsData(template._context.app, parent.$.appContext.app);
}
function findConfigurationComponents(children) {
    return children.filter(function (child) {
        if (isFragment(child)) {
            return findConfigurationComponents(child.children || []);
        }
        var childType = child.type;
        if (childType && typeof childType === 'object' && childType.$_optionName) {
            delete child.$_config;
            delete child.$_innerChanges;
            return child;
        }
    });
}
function hasInlineTemplate(children) {
    var hasTemplate = false;
    children.forEach(function (child) {
        if (!isConfiguration(child) && !isFragment(child) && !isComment(child)) {
            hasTemplate = true;
        }
    });
    return hasTemplate;
}
function isComment(node) {
    return node.type === Comment || (node.type.toString() === 'Symbol()' && !node.children);
}
function isConfiguration(child) {
    return child.type && typeof child.type === 'object' && child.type.$_optionName;
}
export function getConfigurationOptions(node) {
    return node.type;
}
function hasChildren(component) {
    return component.$.vnode && component.$.vnode.children && component.$.vnode.children.default;
}
