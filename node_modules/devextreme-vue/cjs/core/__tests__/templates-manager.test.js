/*!
 * devextreme-vue
 * Version: 23.2.3
 * Build date: Tue Nov 28 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var test_utils_1 = require("@vue/test-utils");
var templates_discovering_1 = require("../templates-discovering");
var templates_manager_1 = require("../templates-manager");
jest.mock('../templates-discovering');
var discoverMock1 = function () { return ({}); };
var discoverMock2 = function () { return ({ template1: jest.fn() }); };
var discoverMock3 = function () { return ({ template1: jest.fn(), template2: jest.fn() }); };
describe('TemplatesManager', function () {
    describe('isDirty', function () {
        it('after init: false', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock1);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            expect(templatesManager.isDirty).toBeFalsy();
        });
        it('after init: true', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock2);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            expect(templatesManager.isDirty).toBeTruthy();
        });
        it('after discover: false (1)', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock1);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            templates_discovering_1.discover.mockImplementationOnce(discoverMock1);
            templatesManager.discover();
            expect(templatesManager.isDirty).toBeFalsy();
        });
        it('after discover: false (2)', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock3);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            templatesManager.resetDirtyFlag();
            templates_discovering_1.discover.mockImplementationOnce(discoverMock3);
            templatesManager.discover();
            expect(templatesManager.isDirty).toBeFalsy();
        });
        it('after discover: true (1)', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock1);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            templates_discovering_1.discover.mockImplementationOnce(discoverMock2);
            templatesManager.discover();
            expect(templatesManager.isDirty).toBeTruthy();
        });
        it('after discover: true (2)', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock2);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            templatesManager.resetDirtyFlag();
            templates_discovering_1.discover.mockImplementationOnce(discoverMock3);
            templatesManager.discover();
            expect(templatesManager.isDirty).toBeTruthy();
        });
        it('after discover: true (3)', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock3);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            templatesManager.resetDirtyFlag();
            templates_discovering_1.discover.mockImplementationOnce(discoverMock2);
            templatesManager.discover();
            expect(templatesManager.isDirty).toBeTruthy();
        });
    });
    describe('resetDirtyFlag', function () {
        it('resets flag value', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock3);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            templatesManager.resetDirtyFlag();
            expect(templatesManager.isDirty).toBeFalsy();
        });
    });
    describe('templates', function () {
        it('returns empty templates', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock1);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            expect(templatesManager.templates).toEqual({});
        });
        it('returns templates', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock3);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            expect(Object.keys(templatesManager.templates)).toEqual(['template1', 'template2']);
        });
        it('clear templates when we do not have slots', function () {
            templates_discovering_1.discover.mockImplementationOnce(discoverMock3);
            var templatesManager = new templates_manager_1.TemplatesManager(test_utils_1.VueWrapper);
            expect(Object.keys(templatesManager.templates)).toEqual(['template1', 'template2']);
            templates_discovering_1.discover.mockImplementationOnce(discoverMock1);
            templatesManager.discover();
            expect(Object.keys(templatesManager.templates)).toEqual([]);
        });
    });
});
