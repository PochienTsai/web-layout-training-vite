/*!
 * devextreme-vue
 * Version: 23.2.3
 * Build date: Tue Nov 28 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = require("../helpers");
describe('toComparable', function () {
    it('Primitive', function () {
        expect(helpers_1.toComparable(1)).toBe(1);
    });
    it('Object', function () {
        var testObject = { text: 1 };
        expect(helpers_1.toComparable(testObject)).toBe(testObject);
    });
    it('Date', function () {
        var testDate = new Date(2018, 9, 9);
        expect(helpers_1.toComparable(testDate)).toBe(testDate.getTime());
    });
});
describe('isEqual', function () {
    it('Primitive', function () {
        expect(helpers_1.isEqual(1, 1)).toBe(true);
    });
    it('Empty Array', function () {
        var testArray1 = [];
        var testArray2 = [];
        expect(helpers_1.isEqual(testArray1, testArray2)).toBe(true);
    });
    it('Empty Array and null', function () {
        var testArray1 = [];
        var testArray2 = null;
        expect(helpers_1.isEqual(testArray1, testArray2)).toBe(false);
        expect(helpers_1.isEqual(testArray2, testArray1)).toBe(false);
    });
    it('Date', function () {
        var testDate1 = new Date(2018, 9, 9);
        var testDate2 = new Date(2018, 9, 9);
        expect(helpers_1.isEqual(testDate1, testDate2)).toBe(true);
    });
});
describe('allKeysAreEqual', function () {
    [
        [{}, {}],
        [{ a: 1 }, { a: 2 }],
        [{ a: 1, b: 2 }, { a: 1, b: 2 }],
        [{}, Object.create({}, { a: { value: 1 } })],
        [Object.create({}, { a: { value: 1 } }), {}],
        [Object.create({}, { a: { value: 1 } }), Object.create({}, { b: { value: 1 } })],
    ].map(function (input) {
        it('returns true', function () {
            expect(helpers_1.allKeysAreEqual(input[0], input[1])).toBe(true);
        });
    });
    [
        [{}, { a: 1 }],
        [{ a: 1 }, {}],
        [{ a: 1, b: 2 }, { a: 1, c: 3 }],
        [{ a: 1 }, Object.create({}, { a: { value: 1 } })],
        [Object.create({}, { a: { value: 1 } }), { a: 1 }],
    ].map(function (input) {
        it('returns false', function () {
            expect(helpers_1.allKeysAreEqual(input[0], input[1])).toBe(false);
        });
    });
});
describe('getOptionValue', function () {
    it('returns for simple option', function () {
        var optionValue = helpers_1.getOptionValue({ test: 'text' }, 'test');
        expect(optionValue).toEqual('text');
    });
    it('returns for complex option', function () {
        var optionValue = helpers_1.getOptionValue({ test: { value: 'text' } }, 'test');
        var optionValue1 = helpers_1.getOptionValue({ test: { value: 'text' } }, 'test.value');
        var optionValue2 = helpers_1.getOptionValue({ test: { value: 'text' } }, 'test1.value');
        expect(optionValue).toEqual({ value: 'text' });
        expect(optionValue1).toEqual('text');
        expect(optionValue2).toEqual(undefined);
    });
    it('returns for collection option', function () {
        var value = [
            { text: 'value1' },
            { text: 'value2' },
            {
                text: 'value3',
                test: [{
                        option: {
                            text: 'value1',
                        },
                    }, {
                        text: 'value2',
                    }],
            },
        ];
        var optionValue1 = helpers_1.getOptionValue({ test: value }, 'test[1]');
        var optionValue2 = helpers_1.getOptionValue({ test: value }, 'test');
        var optionValue3 = helpers_1.getOptionValue({ test: value }, 'test[2].test[1]');
        var optionValue4 = helpers_1.getOptionValue({ test: value }, 'test[2].test');
        var optionValue5 = helpers_1.getOptionValue({ test: value }, 'test[2].test[0].option');
        var optionValue6 = helpers_1.getOptionValue({ test: value }, 'test[2].test[0].option.text');
        expect(optionValue1).toEqual({ text: 'value2' });
        expect(optionValue2).toEqual(value);
        expect(optionValue3).toEqual({ text: 'value2' });
        expect(optionValue4).toEqual([{
                option: { text: 'value1' },
            }, {
                text: 'value2',
            }]);
        expect(optionValue5).toEqual({ text: 'value1' });
        expect(optionValue6).toEqual('value1');
    });
    it('returns for empty', function () {
        var optionValue = helpers_1.getOptionValue({}, 'test');
        var optionValue2 = helpers_1.getOptionValue({ test: [{ text: 'value1' }] }, 'test[1]');
        expect(optionValue).toEqual(undefined);
        expect(optionValue2).toEqual(undefined);
    });
});
describe('getOptionInfo', function () {
    it('returns for simple option', function () {
        var optionInfo = helpers_1.getOptionInfo('test');
        expect(optionInfo.isCollection).toBe(false);
        expect(optionInfo.name).toEqual('test');
        expect(optionInfo.fullName).toEqual('test');
    });
    it('returns for collection option', function () {
        var optionInfo = helpers_1.getOptionInfo('test[4]');
        expect(optionInfo.isCollection).toBe(true);
        expect(optionInfo.name).toEqual('test');
        expect(optionInfo.fullName).toEqual('test[4]');
        if (optionInfo.isCollection) {
            expect(optionInfo.index).toEqual(4);
        }
    });
});
